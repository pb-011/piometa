// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts@4.9/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts@4.9/access/Ownable.sol";

contract Module1 is ERC20, Ownable {
    
    constructor(uint256 initialSupply) ERC20("PHR", "PHRCoin") {
        _mint(msg.sender, initialSupply);
    }

    function mint(address account, uint256 amount) external onlyOwner {
        require(amount > 100, "Mint amount must be greater than 100 MECoin");
        require(account != address(0), "Cannot mint to the zero address");
        _mint(account, amount);
    }

    function burn(uint256 amount) external {
        require(amount > 0, "Burn amount must be greater than zero");
        require(amount <= balanceOf(msg.sender), "Insufficient balance to burn");

        _burn(msg.sender, amount);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "Transfer to the zero address");
        require(amount <= balanceOf(msg.sender), "Insufficient balance");

        _transfer(_msgSender(), recipient, amount);
        return true;
    }
}
